/* 
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IApplicationQrCommand
    /// </summary>
    [DataContract]
    public partial class IApplicationQrCommand :  IEquatable<IApplicationQrCommand>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets QrCommand
        /// </summary>
        [DataMember(Name="qrCommand", EmitDefaultValue=false)]
        public QrCommand? QrCommand { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IApplicationQrCommand" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId.</param>
        /// <param name="qrCommand">qrCommand.</param>
        /// <param name="executed">executed.</param>
        public IApplicationQrCommand(string id = default(string), string userId = default(string), QrCommand? qrCommand = default(QrCommand?), long executed = default(long))
        {
            this.Id = id;
            this.UserId = userId;
            this.QrCommand = qrCommand;
            this.Executed = executed;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Executed
        /// </summary>
        [DataMember(Name="executed", EmitDefaultValue=false)]
        public long Executed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IApplicationQrCommand {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  QrCommand: ").Append(QrCommand).Append("\n");
            sb.Append("  Executed: ").Append(Executed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IApplicationQrCommand);
        }

        /// <summary>
        /// Returns true if IApplicationQrCommand instances are equal
        /// </summary>
        /// <param name="input">Instance of IApplicationQrCommand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IApplicationQrCommand input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.QrCommand == input.QrCommand ||
                    this.QrCommand.Equals(input.QrCommand)
                ) && 
                (
                    this.Executed == input.Executed ||
                    this.Executed.Equals(input.Executed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                hashCode = hashCode * 59 + this.QrCommand.GetHashCode();
                hashCode = hashCode * 59 + this.Executed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
