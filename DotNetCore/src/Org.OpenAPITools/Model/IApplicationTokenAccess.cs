/* 
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IApplicationTokenAccess
    /// </summary>
    [DataContract]
    public partial class IApplicationTokenAccess :  IEquatable<IApplicationTokenAccess>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IApplicationTokenAccess" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId.</param>
        /// <param name="tokenString">tokenString.</param>
        /// <param name="deviceDescription">deviceDescription.</param>
        /// <param name="devicePushToken">devicePushToken.</param>
        /// <param name="expiry">expiry.</param>
        /// <param name="valid">valid.</param>
        /// <param name="deviceId">deviceId.</param>
        public IApplicationTokenAccess(string id = default(string), string userId = default(string), string tokenString = default(string), string deviceDescription = default(string), string devicePushToken = default(string), long expiry = default(long), bool valid = default(bool), string deviceId = default(string))
        {
            this.Id = id;
            this.UserId = userId;
            this.TokenString = tokenString;
            this.DeviceDescription = deviceDescription;
            this.DevicePushToken = devicePushToken;
            this.Expiry = expiry;
            this.Valid = valid;
            this.DeviceId = deviceId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets TokenString
        /// </summary>
        [DataMember(Name="tokenString", EmitDefaultValue=true)]
        public string TokenString { get; set; }

        /// <summary>
        /// Gets or Sets DeviceDescription
        /// </summary>
        [DataMember(Name="deviceDescription", EmitDefaultValue=true)]
        public string DeviceDescription { get; set; }

        /// <summary>
        /// Gets or Sets DevicePushToken
        /// </summary>
        [DataMember(Name="devicePushToken", EmitDefaultValue=true)]
        public string DevicePushToken { get; set; }

        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name="expiry", EmitDefaultValue=false)]
        public long Expiry { get; set; }

        /// <summary>
        /// Gets or Sets Valid
        /// </summary>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool Valid { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name="deviceId", EmitDefaultValue=true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IApplicationTokenAccess {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TokenString: ").Append(TokenString).Append("\n");
            sb.Append("  DeviceDescription: ").Append(DeviceDescription).Append("\n");
            sb.Append("  DevicePushToken: ").Append(DevicePushToken).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IApplicationTokenAccess);
        }

        /// <summary>
        /// Returns true if IApplicationTokenAccess instances are equal
        /// </summary>
        /// <param name="input">Instance of IApplicationTokenAccess to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IApplicationTokenAccess input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.TokenString == input.TokenString ||
                    (this.TokenString != null &&
                    this.TokenString.Equals(input.TokenString))
                ) && 
                (
                    this.DeviceDescription == input.DeviceDescription ||
                    (this.DeviceDescription != null &&
                    this.DeviceDescription.Equals(input.DeviceDescription))
                ) && 
                (
                    this.DevicePushToken == input.DevicePushToken ||
                    (this.DevicePushToken != null &&
                    this.DevicePushToken.Equals(input.DevicePushToken))
                ) && 
                (
                    this.Expiry == input.Expiry ||
                    this.Expiry.Equals(input.Expiry)
                ) && 
                (
                    this.Valid == input.Valid ||
                    this.Valid.Equals(input.Valid)
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.TokenString != null)
                    hashCode = hashCode * 59 + this.TokenString.GetHashCode();
                if (this.DeviceDescription != null)
                    hashCode = hashCode * 59 + this.DeviceDescription.GetHashCode();
                if (this.DevicePushToken != null)
                    hashCode = hashCode * 59 + this.DevicePushToken.GetHashCode();
                hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
