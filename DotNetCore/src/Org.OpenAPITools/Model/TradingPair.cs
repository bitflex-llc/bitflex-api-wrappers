/* 
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TradingPair
    /// </summary>
    [DataContract]
    public partial class TradingPair :  IEquatable<TradingPair>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingPair" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="marketId">marketId.</param>
        /// <param name="currencyId">currencyId.</param>
        /// <param name="pairCompleteName">pairCompleteName.</param>
        /// <param name="active">active.</param>
        /// <param name="minimumTradeAmount">minimumTradeAmount.</param>
        /// <param name="order">order.</param>
        /// <param name="leverage">leverage.</param>
        public TradingPair(string id = default(string), string marketId = default(string), string currencyId = default(string), string pairCompleteName = default(string), bool active = default(bool), double minimumTradeAmount = default(double), int? order = default(int?), int leverage = default(int))
        {
            this.Id = id;
            this.MarketId = marketId;
            this.CurrencyId = currencyId;
            this.PairCompleteName = pairCompleteName;
            this.Active = active;
            this.MinimumTradeAmount = minimumTradeAmount;
            this.Order = order;
            this.Leverage = leverage;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets MarketId
        /// </summary>
        [DataMember(Name="marketId", EmitDefaultValue=true)]
        public string MarketId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="currencyId", EmitDefaultValue=true)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets PairCompleteName
        /// </summary>
        [DataMember(Name="pairCompleteName", EmitDefaultValue=true)]
        public string PairCompleteName { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets MinimumTradeAmount
        /// </summary>
        [DataMember(Name="minimumTradeAmount", EmitDefaultValue=false)]
        public double MinimumTradeAmount { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=true)]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or Sets Leverage
        /// </summary>
        [DataMember(Name="leverage", EmitDefaultValue=false)]
        public int Leverage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradingPair {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MarketId: ").Append(MarketId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  PairCompleteName: ").Append(PairCompleteName).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  MinimumTradeAmount: ").Append(MinimumTradeAmount).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradingPair);
        }

        /// <summary>
        /// Returns true if TradingPair instances are equal
        /// </summary>
        /// <param name="input">Instance of TradingPair to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradingPair input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MarketId == input.MarketId ||
                    (this.MarketId != null &&
                    this.MarketId.Equals(input.MarketId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.PairCompleteName == input.PairCompleteName ||
                    (this.PairCompleteName != null &&
                    this.PairCompleteName.Equals(input.PairCompleteName))
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.MinimumTradeAmount == input.MinimumTradeAmount ||
                    this.MinimumTradeAmount.Equals(input.MinimumTradeAmount)
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Leverage == input.Leverage ||
                    this.Leverage.Equals(input.Leverage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MarketId != null)
                    hashCode = hashCode * 59 + this.MarketId.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.PairCompleteName != null)
                    hashCode = hashCode * 59 + this.PairCompleteName.GetHashCode();
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumTradeAmount.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                hashCode = hashCode * 59 + this.Leverage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
