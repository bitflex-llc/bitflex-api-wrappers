/* 
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PostWithdrawRequest
    /// </summary>
    [DataContract]
    public partial class PostWithdrawRequest :  IEquatable<PostWithdrawRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostWithdrawRequest" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="address">address.</param>
        /// <param name="pinCode">pinCode.</param>
        /// <param name="destinationTag">destinationTag.</param>
        /// <param name="twoFactorCode">twoFactorCode.</param>
        public PostWithdrawRequest(double amount = default(double), string address = default(string), string pinCode = default(string), string destinationTag = default(string), string twoFactorCode = default(string))
        {
            this.Amount = amount;
            this.Address = address;
            this.PinCode = pinCode;
            this.DestinationTag = destinationTag;
            this.TwoFactorCode = twoFactorCode;
        }
        
        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets PinCode
        /// </summary>
        [DataMember(Name="pinCode", EmitDefaultValue=true)]
        public string PinCode { get; set; }

        /// <summary>
        /// Gets or Sets DestinationTag
        /// </summary>
        [DataMember(Name="destinationTag", EmitDefaultValue=true)]
        public string DestinationTag { get; set; }

        /// <summary>
        /// Gets or Sets TwoFactorCode
        /// </summary>
        [DataMember(Name="twoFactorCode", EmitDefaultValue=true)]
        public string TwoFactorCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostWithdrawRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PinCode: ").Append(PinCode).Append("\n");
            sb.Append("  DestinationTag: ").Append(DestinationTag).Append("\n");
            sb.Append("  TwoFactorCode: ").Append(TwoFactorCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostWithdrawRequest);
        }

        /// <summary>
        /// Returns true if PostWithdrawRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostWithdrawRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostWithdrawRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.PinCode == input.PinCode ||
                    (this.PinCode != null &&
                    this.PinCode.Equals(input.PinCode))
                ) && 
                (
                    this.DestinationTag == input.DestinationTag ||
                    (this.DestinationTag != null &&
                    this.DestinationTag.Equals(input.DestinationTag))
                ) && 
                (
                    this.TwoFactorCode == input.TwoFactorCode ||
                    (this.TwoFactorCode != null &&
                    this.TwoFactorCode.Equals(input.TwoFactorCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.PinCode != null)
                    hashCode = hashCode * 59 + this.PinCode.GetHashCode();
                if (this.DestinationTag != null)
                    hashCode = hashCode * 59 + this.DestinationTag.GetHashCode();
                if (this.TwoFactorCode != null)
                    hashCode = hashCode * 59 + this.TwoFactorCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
