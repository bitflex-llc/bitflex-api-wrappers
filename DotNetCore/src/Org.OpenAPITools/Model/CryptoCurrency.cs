/* 
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CryptoCurrency
    /// </summary>
    [DataContract]
    public partial class CryptoCurrency :  IEquatable<CryptoCurrency>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CurrencyType
        /// </summary>
        [DataMember(Name="currencyType", EmitDefaultValue=false)]
        public Type? CurrencyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoCurrency" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="shortName">shortName.</param>
        /// <param name="currencyType">currencyType.</param>
        /// <param name="active">active.</param>
        /// <param name="depositDisabled">depositDisabled.</param>
        /// <param name="withdrawDisabled">withdrawDisabled.</param>
        /// <param name="coinMarketCapId">coinMarketCapId.</param>
        /// <param name="coinMarketCapUsdPrice">coinMarketCapUsdPrice.</param>
        /// <param name="coinMarketCapLastUpdate">coinMarketCapLastUpdate.</param>
        /// <param name="image">image.</param>
        /// <param name="isMarketCurrency">isMarketCurrency.</param>
        /// <param name="blockExplolerTxIdUrl">blockExplolerTxIdUrl.</param>
        /// <param name="withdrawCurrencyFee">withdrawCurrencyFee.</param>
        /// <param name="withdrawPercentFee">withdrawPercentFee.</param>
        /// <param name="confirmationCount">confirmationCount.</param>
        /// <param name="minimumTradeAmount">minimumTradeAmount.</param>
        public CryptoCurrency(string id = default(string), string name = default(string), string shortName = default(string), Type? currencyType = default(Type?), bool active = default(bool), bool depositDisabled = default(bool), bool withdrawDisabled = default(bool), int coinMarketCapId = default(int), double coinMarketCapUsdPrice = default(double), long coinMarketCapLastUpdate = default(long), string image = default(string), bool isMarketCurrency = default(bool), string blockExplolerTxIdUrl = default(string), double withdrawCurrencyFee = default(double), double withdrawPercentFee = default(double), int confirmationCount = default(int), double minimumTradeAmount = default(double))
        {
            this.Id = id;
            this.Name = name;
            this.ShortName = shortName;
            this.CurrencyType = currencyType;
            this.Active = active;
            this.DepositDisabled = depositDisabled;
            this.WithdrawDisabled = withdrawDisabled;
            this.CoinMarketCapId = coinMarketCapId;
            this.CoinMarketCapUsdPrice = coinMarketCapUsdPrice;
            this.CoinMarketCapLastUpdate = coinMarketCapLastUpdate;
            this.Image = image;
            this.IsMarketCurrency = isMarketCurrency;
            this.BlockExplolerTxIdUrl = blockExplolerTxIdUrl;
            this.WithdrawCurrencyFee = withdrawCurrencyFee;
            this.WithdrawPercentFee = withdrawPercentFee;
            this.ConfirmationCount = confirmationCount;
            this.MinimumTradeAmount = minimumTradeAmount;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ShortName
        /// </summary>
        [DataMember(Name="shortName", EmitDefaultValue=true)]
        public string ShortName { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets DepositDisabled
        /// </summary>
        [DataMember(Name="depositDisabled", EmitDefaultValue=false)]
        public bool DepositDisabled { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawDisabled
        /// </summary>
        [DataMember(Name="withdrawDisabled", EmitDefaultValue=false)]
        public bool WithdrawDisabled { get; set; }

        /// <summary>
        /// Gets or Sets CoinMarketCapId
        /// </summary>
        [DataMember(Name="coinMarketCapId", EmitDefaultValue=false)]
        public int CoinMarketCapId { get; set; }

        /// <summary>
        /// Gets or Sets CoinMarketCapUsdPrice
        /// </summary>
        [DataMember(Name="coinMarketCapUsdPrice", EmitDefaultValue=false)]
        public double CoinMarketCapUsdPrice { get; set; }

        /// <summary>
        /// Gets or Sets CoinMarketCapLastUpdate
        /// </summary>
        [DataMember(Name="coinMarketCapLastUpdate", EmitDefaultValue=false)]
        public long CoinMarketCapLastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=true)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets IsMarketCurrency
        /// </summary>
        [DataMember(Name="isMarketCurrency", EmitDefaultValue=false)]
        public bool IsMarketCurrency { get; set; }

        /// <summary>
        /// Gets or Sets BlockExplolerTxIdUrl
        /// </summary>
        [DataMember(Name="blockExplolerTxIdUrl", EmitDefaultValue=true)]
        public string BlockExplolerTxIdUrl { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawCurrencyFee
        /// </summary>
        [DataMember(Name="withdrawCurrencyFee", EmitDefaultValue=false)]
        public double WithdrawCurrencyFee { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawPercentFee
        /// </summary>
        [DataMember(Name="withdrawPercentFee", EmitDefaultValue=false)]
        public double WithdrawPercentFee { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmationCount
        /// </summary>
        [DataMember(Name="confirmationCount", EmitDefaultValue=false)]
        public int ConfirmationCount { get; set; }

        /// <summary>
        /// Gets or Sets MinimumTradeAmount
        /// </summary>
        [DataMember(Name="minimumTradeAmount", EmitDefaultValue=false)]
        public double MinimumTradeAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CryptoCurrency {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  CurrencyType: ").Append(CurrencyType).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  DepositDisabled: ").Append(DepositDisabled).Append("\n");
            sb.Append("  WithdrawDisabled: ").Append(WithdrawDisabled).Append("\n");
            sb.Append("  CoinMarketCapId: ").Append(CoinMarketCapId).Append("\n");
            sb.Append("  CoinMarketCapUsdPrice: ").Append(CoinMarketCapUsdPrice).Append("\n");
            sb.Append("  CoinMarketCapLastUpdate: ").Append(CoinMarketCapLastUpdate).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  IsMarketCurrency: ").Append(IsMarketCurrency).Append("\n");
            sb.Append("  BlockExplolerTxIdUrl: ").Append(BlockExplolerTxIdUrl).Append("\n");
            sb.Append("  WithdrawCurrencyFee: ").Append(WithdrawCurrencyFee).Append("\n");
            sb.Append("  WithdrawPercentFee: ").Append(WithdrawPercentFee).Append("\n");
            sb.Append("  ConfirmationCount: ").Append(ConfirmationCount).Append("\n");
            sb.Append("  MinimumTradeAmount: ").Append(MinimumTradeAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptoCurrency);
        }

        /// <summary>
        /// Returns true if CryptoCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptoCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptoCurrency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.CurrencyType == input.CurrencyType ||
                    this.CurrencyType.Equals(input.CurrencyType)
                ) && 
                (
                    this.Active == input.Active ||
                    this.Active.Equals(input.Active)
                ) && 
                (
                    this.DepositDisabled == input.DepositDisabled ||
                    this.DepositDisabled.Equals(input.DepositDisabled)
                ) && 
                (
                    this.WithdrawDisabled == input.WithdrawDisabled ||
                    this.WithdrawDisabled.Equals(input.WithdrawDisabled)
                ) && 
                (
                    this.CoinMarketCapId == input.CoinMarketCapId ||
                    this.CoinMarketCapId.Equals(input.CoinMarketCapId)
                ) && 
                (
                    this.CoinMarketCapUsdPrice == input.CoinMarketCapUsdPrice ||
                    this.CoinMarketCapUsdPrice.Equals(input.CoinMarketCapUsdPrice)
                ) && 
                (
                    this.CoinMarketCapLastUpdate == input.CoinMarketCapLastUpdate ||
                    this.CoinMarketCapLastUpdate.Equals(input.CoinMarketCapLastUpdate)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.IsMarketCurrency == input.IsMarketCurrency ||
                    this.IsMarketCurrency.Equals(input.IsMarketCurrency)
                ) && 
                (
                    this.BlockExplolerTxIdUrl == input.BlockExplolerTxIdUrl ||
                    (this.BlockExplolerTxIdUrl != null &&
                    this.BlockExplolerTxIdUrl.Equals(input.BlockExplolerTxIdUrl))
                ) && 
                (
                    this.WithdrawCurrencyFee == input.WithdrawCurrencyFee ||
                    this.WithdrawCurrencyFee.Equals(input.WithdrawCurrencyFee)
                ) && 
                (
                    this.WithdrawPercentFee == input.WithdrawPercentFee ||
                    this.WithdrawPercentFee.Equals(input.WithdrawPercentFee)
                ) && 
                (
                    this.ConfirmationCount == input.ConfirmationCount ||
                    this.ConfirmationCount.Equals(input.ConfirmationCount)
                ) && 
                (
                    this.MinimumTradeAmount == input.MinimumTradeAmount ||
                    this.MinimumTradeAmount.Equals(input.MinimumTradeAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ShortName != null)
                    hashCode = hashCode * 59 + this.ShortName.GetHashCode();
                hashCode = hashCode * 59 + this.CurrencyType.GetHashCode();
                hashCode = hashCode * 59 + this.Active.GetHashCode();
                hashCode = hashCode * 59 + this.DepositDisabled.GetHashCode();
                hashCode = hashCode * 59 + this.WithdrawDisabled.GetHashCode();
                hashCode = hashCode * 59 + this.CoinMarketCapId.GetHashCode();
                hashCode = hashCode * 59 + this.CoinMarketCapUsdPrice.GetHashCode();
                hashCode = hashCode * 59 + this.CoinMarketCapLastUpdate.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                hashCode = hashCode * 59 + this.IsMarketCurrency.GetHashCode();
                if (this.BlockExplolerTxIdUrl != null)
                    hashCode = hashCode * 59 + this.BlockExplolerTxIdUrl.GetHashCode();
                hashCode = hashCode * 59 + this.WithdrawCurrencyFee.GetHashCode();
                hashCode = hashCode * 59 + this.WithdrawPercentFee.GetHashCode();
                hashCode = hashCode * 59 + this.ConfirmationCount.GetHashCode();
                hashCode = hashCode * 59 + this.MinimumTradeAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
