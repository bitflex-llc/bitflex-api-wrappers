/* 
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ERC20Token
    /// </summary>
    [DataContract]
    public partial class ERC20Token :  IEquatable<ERC20Token>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ERC20Token" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="currencyId">currencyId.</param>
        /// <param name="contractAddress">contractAddress.</param>
        /// <param name="decimals">decimals.</param>
        /// <param name="tokenBlockNumber">tokenBlockNumber.</param>
        public ERC20Token(string id = default(string), string currencyId = default(string), string contractAddress = default(string), int decimals = default(int), int tokenBlockNumber = default(int))
        {
            this.Id = id;
            this.CurrencyId = currencyId;
            this.ContractAddress = contractAddress;
            this.Decimals = decimals;
            this.TokenBlockNumber = tokenBlockNumber;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="currencyId", EmitDefaultValue=true)]
        public string CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets ContractAddress
        /// </summary>
        [DataMember(Name="contractAddress", EmitDefaultValue=true)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets Decimals
        /// </summary>
        [DataMember(Name="decimals", EmitDefaultValue=false)]
        public int Decimals { get; set; }

        /// <summary>
        /// Gets or Sets TokenBlockNumber
        /// </summary>
        [DataMember(Name="tokenBlockNumber", EmitDefaultValue=false)]
        public int TokenBlockNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ERC20Token {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  TokenBlockNumber: ").Append(TokenBlockNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ERC20Token);
        }

        /// <summary>
        /// Returns true if ERC20Token instances are equal
        /// </summary>
        /// <param name="input">Instance of ERC20Token to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ERC20Token input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.Decimals == input.Decimals ||
                    this.Decimals.Equals(input.Decimals)
                ) && 
                (
                    this.TokenBlockNumber == input.TokenBlockNumber ||
                    this.TokenBlockNumber.Equals(input.TokenBlockNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.ContractAddress != null)
                    hashCode = hashCode * 59 + this.ContractAddress.GetHashCode();
                hashCode = hashCode * 59 + this.Decimals.GetHashCode();
                hashCode = hashCode * 59 + this.TokenBlockNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
