/* 
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// StringIdentityUserLogin
    /// </summary>
    [DataContract]
    public partial class StringIdentityUserLogin :  IEquatable<StringIdentityUserLogin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StringIdentityUserLogin" /> class.
        /// </summary>
        /// <param name="loginProvider">loginProvider.</param>
        /// <param name="providerKey">providerKey.</param>
        /// <param name="providerDisplayName">providerDisplayName.</param>
        /// <param name="userId">userId.</param>
        public StringIdentityUserLogin(string loginProvider = default(string), string providerKey = default(string), string providerDisplayName = default(string), string userId = default(string))
        {
            this.LoginProvider = loginProvider;
            this.ProviderKey = providerKey;
            this.ProviderDisplayName = providerDisplayName;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Gets or Sets LoginProvider
        /// </summary>
        [DataMember(Name="loginProvider", EmitDefaultValue=true)]
        public string LoginProvider { get; set; }

        /// <summary>
        /// Gets or Sets ProviderKey
        /// </summary>
        [DataMember(Name="providerKey", EmitDefaultValue=true)]
        public string ProviderKey { get; set; }

        /// <summary>
        /// Gets or Sets ProviderDisplayName
        /// </summary>
        [DataMember(Name="providerDisplayName", EmitDefaultValue=true)]
        public string ProviderDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StringIdentityUserLogin {\n");
            sb.Append("  LoginProvider: ").Append(LoginProvider).Append("\n");
            sb.Append("  ProviderKey: ").Append(ProviderKey).Append("\n");
            sb.Append("  ProviderDisplayName: ").Append(ProviderDisplayName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StringIdentityUserLogin);
        }

        /// <summary>
        /// Returns true if StringIdentityUserLogin instances are equal
        /// </summary>
        /// <param name="input">Instance of StringIdentityUserLogin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StringIdentityUserLogin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoginProvider == input.LoginProvider ||
                    (this.LoginProvider != null &&
                    this.LoginProvider.Equals(input.LoginProvider))
                ) && 
                (
                    this.ProviderKey == input.ProviderKey ||
                    (this.ProviderKey != null &&
                    this.ProviderKey.Equals(input.ProviderKey))
                ) && 
                (
                    this.ProviderDisplayName == input.ProviderDisplayName ||
                    (this.ProviderDisplayName != null &&
                    this.ProviderDisplayName.Equals(input.ProviderDisplayName))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoginProvider != null)
                    hashCode = hashCode * 59 + this.LoginProvider.GetHashCode();
                if (this.ProviderKey != null)
                    hashCode = hashCode * 59 + this.ProviderKey.GetHashCode();
                if (this.ProviderDisplayName != null)
                    hashCode = hashCode * 59 + this.ProviderDisplayName.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
