/* 
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns></returns>
        void ApiUserBalanceactionsGet (int? page = default(int?), int? size = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUserBalanceactionsGetWithHttpInfo (int? page = default(int?), int? size = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, double&gt;</returns>
        Dictionary<string, double> ApiUserBalancesGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, double&gt;</returns>
        ApiResponse<Dictionary<string, double>> ApiUserBalancesGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ApiUserBalanceslistGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUserBalanceslistGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns></returns>
        void ApiUserDepositsGet (string currency = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUserDepositsGetWithHttpInfo (string currency = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string ApiUserGetapptokenGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiUserGetapptokenGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair"> (optional)</param>
        /// <returns></returns>
        void ApiUserOrdersGet (string pair = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUserOrdersGetWithHttpInfo (string pair = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns></returns>
        void ApiUserTradehistoryGet (int? page = default(int?), int? size = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUserTradehistoryGetWithHttpInfo (int? page = default(int?), int? size = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>string</returns>
        string ApiUserValidateOauthGet (string id = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiUserValidateOauthGetWithHttpInfo (string id = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ApiUserValidateapptokenPost (Object body = default(Object));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUserValidateapptokenPostWithHttpInfo (Object body = default(Object));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns></returns>
        void ApiUserWithdrawalsGet (string currency = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiUserWithdrawalsGetWithHttpInfo (string currency = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void User2faPost (Object body = default(Object));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> User2faPostWithHttpInfo (Object body = default(Object));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns></returns>
        void UserAffiliatedataPost (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserAffiliatedataPostWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UserApplicationqrcommandPost (Object body = default(Object));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserApplicationqrcommandPostWithHttpInfo (Object body = default(Object));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="isInApp"> (optional)</param>
        /// <returns></returns>
        void UserConfirmemailGet (string userId = default(string), string code = default(string), bool? isInApp = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="isInApp"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserConfirmemailGetWithHttpInfo (string userId = default(string), string code = default(string), bool? isInApp = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns></returns>
        void UserDisable2faPost (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserDisable2faPostWithHttpInfo (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns></returns>
        void UserEnable2faPost (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserEnable2faPostWithHttpInfo (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UserExternaltokenPost (Object body = default(Object));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserExternaltokenPostWithHttpInfo (Object body = default(Object));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns></returns>
        void UserGetapptokenPost (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserGetapptokenPostWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns></returns>
        void UserGetreferreremailPost (PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserGetreferreremailPostWithHttpInfo (PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPassword"> (optional)</param>
        /// <returns></returns>
        void UserResetpasswordPost (ResetPassword resetPassword = default(ResetPassword));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPassword"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserResetpasswordPostWithHttpInfo (ResetPassword resetPassword = default(ResetPassword));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPassword"> (optional)</param>
        /// <returns></returns>
        void UserRestorepasswordPost (ForgotPassword forgotPassword = default(ForgotPassword));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPassword"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserRestorepasswordPostWithHttpInfo (ForgotPassword forgotPassword = default(ForgotPassword));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSendSms"> (optional)</param>
        /// <returns></returns>
        void UserSendsmscodePost (PostSendSms postSendSms = default(PostSendSms));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSendSms"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserSendsmscodePostWithHttpInfo (PostSendSms postSendSms = default(PostSendSms));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns></returns>
        void UserSetAffiliatePost (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserSetAffiliatePostWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signIn"> (optional)</param>
        /// <returns></returns>
        void UserSigninPost (SignIn signIn = default(SignIn));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signIn"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserSigninPostWithHttpInfo (SignIn signIn = default(SignIn));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signUp"> (optional)</param>
        /// <returns></returns>
        void UserSignupPost (SignUp signUp = default(SignUp));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signUp"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserSignupPostWithHttpInfo (SignUp signUp = default(SignUp));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UserValidatePinPost (Object body = default(Object));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserValidatePinPostWithHttpInfo (Object body = default(Object));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void UserVerificationsGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserVerificationsGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVefirySms"> (optional)</param>
        /// <returns></returns>
        void UserVerifysmscodePost (PostVefirySms postVefirySms = default(PostVefirySms));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVefirySms"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserVerifysmscodePostWithHttpInfo (PostVefirySms postVefirySms = default(PostVefirySms));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns></returns>
        void UserWithdrawalsGet (string currency = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserWithdrawalsGetWithHttpInfo (string currency = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUserBalanceactionsGetAsync (int? page = default(int?), int? size = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUserBalanceactionsGetAsyncWithHttpInfo (int? page = default(int?), int? size = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, double&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, double>> ApiUserBalancesGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, double&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, double>>> ApiUserBalancesGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUserBalanceslistGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUserBalanceslistGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUserDepositsGetAsync (string currency = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUserDepositsGetAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiUserGetapptokenGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiUserGetapptokenGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUserOrdersGetAsync (string pair = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUserOrdersGetAsyncWithHttpInfo (string pair = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUserTradehistoryGetAsync (int? page = default(int?), int? size = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUserTradehistoryGetAsyncWithHttpInfo (int? page = default(int?), int? size = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiUserValidateOauthGetAsync (string id = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiUserValidateOauthGetAsyncWithHttpInfo (string id = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUserValidateapptokenPostAsync (Object body = default(Object));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUserValidateapptokenPostAsyncWithHttpInfo (Object body = default(Object));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiUserWithdrawalsGetAsync (string currency = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiUserWithdrawalsGetAsyncWithHttpInfo (string currency = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task User2faPostAsync (Object body = default(Object));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> User2faPostAsyncWithHttpInfo (Object body = default(Object));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserAffiliatedataPostAsync (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserAffiliatedataPostAsyncWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserApplicationqrcommandPostAsync (Object body = default(Object));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserApplicationqrcommandPostAsyncWithHttpInfo (Object body = default(Object));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="isInApp"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserConfirmemailGetAsync (string userId = default(string), string code = default(string), bool? isInApp = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="isInApp"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserConfirmemailGetAsyncWithHttpInfo (string userId = default(string), string code = default(string), bool? isInApp = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserDisable2faPostAsync (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserDisable2faPostAsyncWithHttpInfo (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserEnable2faPostAsync (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserEnable2faPostAsyncWithHttpInfo (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserExternaltokenPostAsync (Object body = default(Object));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserExternaltokenPostAsyncWithHttpInfo (Object body = default(Object));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserGetapptokenPostAsync (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserGetapptokenPostAsyncWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserGetreferreremailPostAsync (PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserGetreferreremailPostAsyncWithHttpInfo (PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPassword"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserResetpasswordPostAsync (ResetPassword resetPassword = default(ResetPassword));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPassword"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserResetpasswordPostAsyncWithHttpInfo (ResetPassword resetPassword = default(ResetPassword));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPassword"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserRestorepasswordPostAsync (ForgotPassword forgotPassword = default(ForgotPassword));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPassword"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserRestorepasswordPostAsyncWithHttpInfo (ForgotPassword forgotPassword = default(ForgotPassword));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSendSms"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserSendsmscodePostAsync (PostSendSms postSendSms = default(PostSendSms));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSendSms"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserSendsmscodePostAsyncWithHttpInfo (PostSendSms postSendSms = default(PostSendSms));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserSetAffiliatePostAsync (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserSetAffiliatePostAsyncWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signIn"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserSigninPostAsync (SignIn signIn = default(SignIn));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signIn"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserSigninPostAsyncWithHttpInfo (SignIn signIn = default(SignIn));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signUp"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserSignupPostAsync (SignUp signUp = default(SignUp));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signUp"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserSignupPostAsyncWithHttpInfo (SignUp signUp = default(SignUp));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserValidatePinPostAsync (Object body = default(Object));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserValidatePinPostAsyncWithHttpInfo (Object body = default(Object));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserVerificationsGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserVerificationsGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVefirySms"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserVerifysmscodePostAsync (PostVefirySms postVefirySms = default(PostVefirySms));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVefirySms"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserVerifysmscodePostAsyncWithHttpInfo (PostVefirySms postVefirySms = default(PostVefirySms));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserWithdrawalsGetAsync (string currency = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserWithdrawalsGetAsyncWithHttpInfo (string currency = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns></returns>
        public void ApiUserBalanceactionsGet (int? page = default(int?), int? size = default(int?))
        {
             ApiUserBalanceactionsGetWithHttpInfo(page, size);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiUserBalanceactionsGetWithHttpInfo (int? page = default(int?), int? size = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/User/balanceactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserBalanceactionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUserBalanceactionsGetAsync (int? page = default(int?), int? size = default(int?))
        {
             await ApiUserBalanceactionsGetAsyncWithHttpInfo(page, size);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiUserBalanceactionsGetAsyncWithHttpInfo (int? page = default(int?), int? size = default(int?))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/User/balanceactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserBalanceactionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, double&gt;</returns>
        public Dictionary<string, double> ApiUserBalancesGet ()
        {
             Org.OpenAPITools.Client.ApiResponse<Dictionary<string, double>> localVarResponse = ApiUserBalancesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, double&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< Dictionary<string, double> > ApiUserBalancesGetWithHttpInfo ()
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Dictionary<string, double> >("/api/User/balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserBalancesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, double&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, double>> ApiUserBalancesGetAsync ()
        {
             Org.OpenAPITools.Client.ApiResponse<Dictionary<string, double>> localVarResponse = await ApiUserBalancesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, double&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Dictionary<string, double>>> ApiUserBalancesGetAsyncWithHttpInfo ()
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, double>>("/api/User/balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserBalancesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ApiUserBalanceslistGet ()
        {
             ApiUserBalanceslistGetWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiUserBalanceslistGetWithHttpInfo ()
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/User/balanceslist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserBalanceslistGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUserBalanceslistGetAsync ()
        {
             await ApiUserBalanceslistGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiUserBalanceslistGetAsyncWithHttpInfo ()
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/User/balanceslist", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserBalanceslistGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns></returns>
        public void ApiUserDepositsGet (string currency = default(string))
        {
             ApiUserDepositsGetWithHttpInfo(currency);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiUserDepositsGetWithHttpInfo (string currency = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/User/deposits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserDepositsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUserDepositsGetAsync (string currency = default(string))
        {
             await ApiUserDepositsGetAsyncWithHttpInfo(currency);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiUserDepositsGetAsyncWithHttpInfo (string currency = default(string))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/User/deposits", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserDepositsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string ApiUserGetapptokenGet ()
        {
             Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = ApiUserGetapptokenGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse< string > ApiUserGetapptokenGetWithHttpInfo ()
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/api/User/getapptoken", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserGetapptokenGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiUserGetapptokenGetAsync ()
        {
             Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await ApiUserGetapptokenGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> ApiUserGetapptokenGetAsyncWithHttpInfo ()
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/api/User/getapptoken", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserGetapptokenGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair"> (optional)</param>
        /// <returns></returns>
        public void ApiUserOrdersGet (string pair = default(string))
        {
             ApiUserOrdersGetWithHttpInfo(pair);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiUserOrdersGetWithHttpInfo (string pair = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pair != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pair", pair));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/User/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserOrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUserOrdersGetAsync (string pair = default(string))
        {
             await ApiUserOrdersGetAsyncWithHttpInfo(pair);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiUserOrdersGetAsyncWithHttpInfo (string pair = default(string))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (pair != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pair", pair));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/User/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserOrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns></returns>
        public void ApiUserTradehistoryGet (int? page = default(int?), int? size = default(int?))
        {
             ApiUserTradehistoryGetWithHttpInfo(page, size);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiUserTradehistoryGetWithHttpInfo (int? page = default(int?), int? size = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/User/tradehistory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserTradehistoryGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUserTradehistoryGetAsync (int? page = default(int?), int? size = default(int?))
        {
             await ApiUserTradehistoryGetAsyncWithHttpInfo(page, size);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="size"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiUserTradehistoryGetAsyncWithHttpInfo (int? page = default(int?), int? size = default(int?))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/User/tradehistory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserTradehistoryGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>string</returns>
        public string ApiUserValidateOauthGet (string id = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = ApiUserValidateOauthGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse< string > ApiUserValidateOauthGetWithHttpInfo (string id = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< string >("/api/User/validateOauth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserValidateOauthGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiUserValidateOauthGetAsync (string id = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await ApiUserValidateOauthGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> ApiUserValidateOauthGetAsyncWithHttpInfo (string id = default(string))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/api/User/validateOauth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserValidateOauthGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ApiUserValidateapptokenPost (Object body = default(Object))
        {
             ApiUserValidateapptokenPostWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiUserValidateapptokenPostWithHttpInfo (Object body = default(Object))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/User/validateapptoken", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserValidateapptokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUserValidateapptokenPostAsync (Object body = default(Object))
        {
             await ApiUserValidateapptokenPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiUserValidateapptokenPostAsyncWithHttpInfo (Object body = default(Object))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/User/validateapptoken", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserValidateapptokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns></returns>
        public void ApiUserWithdrawalsGet (string currency = default(string))
        {
             ApiUserWithdrawalsGetWithHttpInfo(currency);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiUserWithdrawalsGetWithHttpInfo (string currency = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/User/withdrawals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserWithdrawalsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiUserWithdrawalsGetAsync (string currency = default(string))
        {
             await ApiUserWithdrawalsGetAsyncWithHttpInfo(currency);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiUserWithdrawalsGetAsyncWithHttpInfo (string currency = default(string))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/User/withdrawals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiUserWithdrawalsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void User2faPost (Object body = default(Object))
        {
             User2faPostWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> User2faPostWithHttpInfo (Object body = default(Object))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/2fa", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("User2faPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task User2faPostAsync (Object body = default(Object))
        {
             await User2faPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> User2faPostAsyncWithHttpInfo (Object body = default(Object))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/2fa", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("User2faPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns></returns>
        public void UserAffiliatedataPost (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?))
        {
             UserAffiliatedataPostWithHttpInfo(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, model, contextIdInstanceId, contextIdLease);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserAffiliatedataPostWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cryptoCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "CryptoCurrencies", cryptoCurrencies));
            }
            if (orders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Orders", orders));
            }
            if (depositAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "DepositAddresses", depositAddresses));
            }
            if (userBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserBalances", userBalances));
            }
            if (markets != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Markets", markets));
            }
            if (tradingPairs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingPairs", tradingPairs));
            }
            if (transactions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Transactions", transactions));
            }
            if (withdrawRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "WithdrawRequests", withdrawRequests));
            }
            if (trades != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Trades", trades));
            }
            if (quotes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Quotes", quotes));
            }
            if (smsVerificationMessages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "SmsVerificationMessages", smsVerificationMessages));
            }
            if (tradingAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingAmounts", tradingAmounts));
            }
            if (rippleDestinationTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RippleDestinationTags", rippleDestinationTags));
            }
            if (bitcoinBasedCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BitcoinBasedCurrencies", bitcoinBasedCurrencies));
            }
            if (eRC20Tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ERC20Tokens", eRC20Tokens));
            }
            if (balanceActions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BalanceActions", balanceActions));
            }
            if (keysValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "KeysValues", keysValues));
            }
            if (applicationTokenAccesses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationTokenAccesses", applicationTokenAccesses));
            }
            if (applicationQrCommands != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationQrCommands", applicationQrCommands));
            }
            if (pushTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "PushTokens", pushTokens));
            }
            if (userRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserRoles", userRoles));
            }
            if (roles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Roles", roles));
            }
            if (roleClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RoleClaims", roleClaims));
            }
            if (users != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Users", users));
            }
            if (userClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserClaims", userClaims));
            }
            if (userLogins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserLogins", userLogins));
            }
            if (userTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserTokens", userTokens));
            }
            if (databaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.CurrentTransaction.TransactionId", databaseCurrentTransactionTransactionId));
            }
            if (databaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.AutoTransactionsEnabled", databaseAutoTransactionsEnabled));
            }
            if (databaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.ProviderName", databaseProviderName));
            }
            if (changeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.AutoDetectChangesEnabled", changeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.LazyLoadingEnabled", changeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.QueryTrackingBehavior", changeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DeleteOrphansTiming", changeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.CascadeDeleteTiming", changeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextDatabaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.CurrentTransaction.TransactionId", changeTrackerContextDatabaseCurrentTransactionTransactionId));
            }
            if (changeTrackerContextDatabaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.AutoTransactionsEnabled", changeTrackerContextDatabaseAutoTransactionsEnabled));
            }
            if (changeTrackerContextDatabaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.ProviderName", changeTrackerContextDatabaseProviderName));
            }
            if (changeTrackerContextChangeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.AutoDetectChangesEnabled", changeTrackerContextChangeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerContextChangeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.LazyLoadingEnabled", changeTrackerContextChangeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerContextChangeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.QueryTrackingBehavior", changeTrackerContextChangeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerContextChangeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DeleteOrphansTiming", changeTrackerContextChangeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerContextChangeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.CascadeDeleteTiming", changeTrackerContextChangeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextChangeTrackerContext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.Context", changeTrackerContextChangeTrackerContext));
            }
            if (changeTrackerContextModel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Model", changeTrackerContextModel));
            }
            if (changeTrackerContextContextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.InstanceId", changeTrackerContextContextIdInstanceId));
            }
            if (changeTrackerContextContextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.Lease", changeTrackerContextContextIdLease));
            }
            if (model != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Model", model));
            }
            if (contextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.InstanceId", contextIdInstanceId));
            }
            if (contextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.Lease", contextIdLease));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/affiliatedata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAffiliatedataPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserAffiliatedataPostAsync (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?))
        {
             await UserAffiliatedataPostAsyncWithHttpInfo(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, model, contextIdInstanceId, contextIdLease);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserAffiliatedataPostAsyncWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cryptoCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "CryptoCurrencies", cryptoCurrencies));
            }
            if (orders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Orders", orders));
            }
            if (depositAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "DepositAddresses", depositAddresses));
            }
            if (userBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserBalances", userBalances));
            }
            if (markets != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Markets", markets));
            }
            if (tradingPairs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingPairs", tradingPairs));
            }
            if (transactions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Transactions", transactions));
            }
            if (withdrawRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "WithdrawRequests", withdrawRequests));
            }
            if (trades != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Trades", trades));
            }
            if (quotes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Quotes", quotes));
            }
            if (smsVerificationMessages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "SmsVerificationMessages", smsVerificationMessages));
            }
            if (tradingAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingAmounts", tradingAmounts));
            }
            if (rippleDestinationTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RippleDestinationTags", rippleDestinationTags));
            }
            if (bitcoinBasedCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BitcoinBasedCurrencies", bitcoinBasedCurrencies));
            }
            if (eRC20Tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ERC20Tokens", eRC20Tokens));
            }
            if (balanceActions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BalanceActions", balanceActions));
            }
            if (keysValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "KeysValues", keysValues));
            }
            if (applicationTokenAccesses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationTokenAccesses", applicationTokenAccesses));
            }
            if (applicationQrCommands != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationQrCommands", applicationQrCommands));
            }
            if (pushTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "PushTokens", pushTokens));
            }
            if (userRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserRoles", userRoles));
            }
            if (roles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Roles", roles));
            }
            if (roleClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RoleClaims", roleClaims));
            }
            if (users != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Users", users));
            }
            if (userClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserClaims", userClaims));
            }
            if (userLogins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserLogins", userLogins));
            }
            if (userTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserTokens", userTokens));
            }
            if (databaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.CurrentTransaction.TransactionId", databaseCurrentTransactionTransactionId));
            }
            if (databaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.AutoTransactionsEnabled", databaseAutoTransactionsEnabled));
            }
            if (databaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.ProviderName", databaseProviderName));
            }
            if (changeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.AutoDetectChangesEnabled", changeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.LazyLoadingEnabled", changeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.QueryTrackingBehavior", changeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DeleteOrphansTiming", changeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.CascadeDeleteTiming", changeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextDatabaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.CurrentTransaction.TransactionId", changeTrackerContextDatabaseCurrentTransactionTransactionId));
            }
            if (changeTrackerContextDatabaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.AutoTransactionsEnabled", changeTrackerContextDatabaseAutoTransactionsEnabled));
            }
            if (changeTrackerContextDatabaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.ProviderName", changeTrackerContextDatabaseProviderName));
            }
            if (changeTrackerContextChangeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.AutoDetectChangesEnabled", changeTrackerContextChangeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerContextChangeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.LazyLoadingEnabled", changeTrackerContextChangeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerContextChangeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.QueryTrackingBehavior", changeTrackerContextChangeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerContextChangeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DeleteOrphansTiming", changeTrackerContextChangeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerContextChangeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.CascadeDeleteTiming", changeTrackerContextChangeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextChangeTrackerContext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.Context", changeTrackerContextChangeTrackerContext));
            }
            if (changeTrackerContextModel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Model", changeTrackerContextModel));
            }
            if (changeTrackerContextContextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.InstanceId", changeTrackerContextContextIdInstanceId));
            }
            if (changeTrackerContextContextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.Lease", changeTrackerContextContextIdLease));
            }
            if (model != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Model", model));
            }
            if (contextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.InstanceId", contextIdInstanceId));
            }
            if (contextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.Lease", contextIdLease));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/affiliatedata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAffiliatedataPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UserApplicationqrcommandPost (Object body = default(Object))
        {
             UserApplicationqrcommandPostWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserApplicationqrcommandPostWithHttpInfo (Object body = default(Object))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/applicationqrcommand", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserApplicationqrcommandPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserApplicationqrcommandPostAsync (Object body = default(Object))
        {
             await UserApplicationqrcommandPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserApplicationqrcommandPostAsyncWithHttpInfo (Object body = default(Object))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/applicationqrcommand", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserApplicationqrcommandPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="isInApp"> (optional)</param>
        /// <returns></returns>
        public void UserConfirmemailGet (string userId = default(string), string code = default(string), bool? isInApp = default(bool?))
        {
             UserConfirmemailGetWithHttpInfo(userId, code, isInApp);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="isInApp"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserConfirmemailGetWithHttpInfo (string userId = default(string), string code = default(string), bool? isInApp = default(bool?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "UserId", userId));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Code", code));
            }
            if (isInApp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IsInApp", isInApp));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/User/confirmemail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserConfirmemailGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="isInApp"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserConfirmemailGetAsync (string userId = default(string), string code = default(string), bool? isInApp = default(bool?))
        {
             await UserConfirmemailGetAsyncWithHttpInfo(userId, code, isInApp);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"> (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="isInApp"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserConfirmemailGetAsyncWithHttpInfo (string userId = default(string), string code = default(string), bool? isInApp = default(bool?))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "UserId", userId));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Code", code));
            }
            if (isInApp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "IsInApp", isInApp));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/User/confirmemail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserConfirmemailGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns></returns>
        public void UserDisable2faPost (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa))
        {
             UserDisable2faPostWithHttpInfo(enableDisable2Fa);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserDisable2faPostWithHttpInfo (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = enableDisable2Fa;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/disable2fa", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDisable2faPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserDisable2faPostAsync (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa))
        {
             await UserDisable2faPostAsyncWithHttpInfo(enableDisable2Fa);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserDisable2faPostAsyncWithHttpInfo (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = enableDisable2Fa;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/disable2fa", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserDisable2faPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns></returns>
        public void UserEnable2faPost (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa))
        {
             UserEnable2faPostWithHttpInfo(enableDisable2Fa);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserEnable2faPostWithHttpInfo (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = enableDisable2Fa;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/enable2fa", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserEnable2faPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserEnable2faPostAsync (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa))
        {
             await UserEnable2faPostAsyncWithHttpInfo(enableDisable2Fa);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="enableDisable2Fa"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserEnable2faPostAsyncWithHttpInfo (EnableDisable2Fa enableDisable2Fa = default(EnableDisable2Fa))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = enableDisable2Fa;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/enable2fa", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserEnable2faPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UserExternaltokenPost (Object body = default(Object))
        {
             UserExternaltokenPostWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserExternaltokenPostWithHttpInfo (Object body = default(Object))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/externaltoken", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserExternaltokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserExternaltokenPostAsync (Object body = default(Object))
        {
             await UserExternaltokenPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserExternaltokenPostAsyncWithHttpInfo (Object body = default(Object))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/externaltoken", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserExternaltokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns></returns>
        public void UserGetapptokenPost (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?))
        {
             UserGetapptokenPostWithHttpInfo(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, model, contextIdInstanceId, contextIdLease);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserGetapptokenPostWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cryptoCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "CryptoCurrencies", cryptoCurrencies));
            }
            if (orders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Orders", orders));
            }
            if (depositAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "DepositAddresses", depositAddresses));
            }
            if (userBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserBalances", userBalances));
            }
            if (markets != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Markets", markets));
            }
            if (tradingPairs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingPairs", tradingPairs));
            }
            if (transactions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Transactions", transactions));
            }
            if (withdrawRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "WithdrawRequests", withdrawRequests));
            }
            if (trades != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Trades", trades));
            }
            if (quotes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Quotes", quotes));
            }
            if (smsVerificationMessages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "SmsVerificationMessages", smsVerificationMessages));
            }
            if (tradingAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingAmounts", tradingAmounts));
            }
            if (rippleDestinationTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RippleDestinationTags", rippleDestinationTags));
            }
            if (bitcoinBasedCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BitcoinBasedCurrencies", bitcoinBasedCurrencies));
            }
            if (eRC20Tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ERC20Tokens", eRC20Tokens));
            }
            if (balanceActions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BalanceActions", balanceActions));
            }
            if (keysValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "KeysValues", keysValues));
            }
            if (applicationTokenAccesses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationTokenAccesses", applicationTokenAccesses));
            }
            if (applicationQrCommands != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationQrCommands", applicationQrCommands));
            }
            if (pushTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "PushTokens", pushTokens));
            }
            if (userRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserRoles", userRoles));
            }
            if (roles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Roles", roles));
            }
            if (roleClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RoleClaims", roleClaims));
            }
            if (users != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Users", users));
            }
            if (userClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserClaims", userClaims));
            }
            if (userLogins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserLogins", userLogins));
            }
            if (userTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserTokens", userTokens));
            }
            if (databaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.CurrentTransaction.TransactionId", databaseCurrentTransactionTransactionId));
            }
            if (databaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.AutoTransactionsEnabled", databaseAutoTransactionsEnabled));
            }
            if (databaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.ProviderName", databaseProviderName));
            }
            if (changeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.AutoDetectChangesEnabled", changeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.LazyLoadingEnabled", changeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.QueryTrackingBehavior", changeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DeleteOrphansTiming", changeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.CascadeDeleteTiming", changeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextDatabaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.CurrentTransaction.TransactionId", changeTrackerContextDatabaseCurrentTransactionTransactionId));
            }
            if (changeTrackerContextDatabaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.AutoTransactionsEnabled", changeTrackerContextDatabaseAutoTransactionsEnabled));
            }
            if (changeTrackerContextDatabaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.ProviderName", changeTrackerContextDatabaseProviderName));
            }
            if (changeTrackerContextChangeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.AutoDetectChangesEnabled", changeTrackerContextChangeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerContextChangeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.LazyLoadingEnabled", changeTrackerContextChangeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerContextChangeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.QueryTrackingBehavior", changeTrackerContextChangeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerContextChangeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DeleteOrphansTiming", changeTrackerContextChangeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerContextChangeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.CascadeDeleteTiming", changeTrackerContextChangeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextChangeTrackerContext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.Context", changeTrackerContextChangeTrackerContext));
            }
            if (changeTrackerContextModel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Model", changeTrackerContextModel));
            }
            if (changeTrackerContextContextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.InstanceId", changeTrackerContextContextIdInstanceId));
            }
            if (changeTrackerContextContextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.Lease", changeTrackerContextContextIdLease));
            }
            if (model != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Model", model));
            }
            if (contextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.InstanceId", contextIdInstanceId));
            }
            if (contextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.Lease", contextIdLease));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/getapptoken", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetapptokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserGetapptokenPostAsync (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?))
        {
             await UserGetapptokenPostAsyncWithHttpInfo(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, model, contextIdInstanceId, contextIdLease);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserGetapptokenPostAsyncWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cryptoCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "CryptoCurrencies", cryptoCurrencies));
            }
            if (orders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Orders", orders));
            }
            if (depositAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "DepositAddresses", depositAddresses));
            }
            if (userBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserBalances", userBalances));
            }
            if (markets != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Markets", markets));
            }
            if (tradingPairs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingPairs", tradingPairs));
            }
            if (transactions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Transactions", transactions));
            }
            if (withdrawRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "WithdrawRequests", withdrawRequests));
            }
            if (trades != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Trades", trades));
            }
            if (quotes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Quotes", quotes));
            }
            if (smsVerificationMessages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "SmsVerificationMessages", smsVerificationMessages));
            }
            if (tradingAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingAmounts", tradingAmounts));
            }
            if (rippleDestinationTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RippleDestinationTags", rippleDestinationTags));
            }
            if (bitcoinBasedCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BitcoinBasedCurrencies", bitcoinBasedCurrencies));
            }
            if (eRC20Tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ERC20Tokens", eRC20Tokens));
            }
            if (balanceActions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BalanceActions", balanceActions));
            }
            if (keysValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "KeysValues", keysValues));
            }
            if (applicationTokenAccesses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationTokenAccesses", applicationTokenAccesses));
            }
            if (applicationQrCommands != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationQrCommands", applicationQrCommands));
            }
            if (pushTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "PushTokens", pushTokens));
            }
            if (userRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserRoles", userRoles));
            }
            if (roles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Roles", roles));
            }
            if (roleClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RoleClaims", roleClaims));
            }
            if (users != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Users", users));
            }
            if (userClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserClaims", userClaims));
            }
            if (userLogins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserLogins", userLogins));
            }
            if (userTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserTokens", userTokens));
            }
            if (databaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.CurrentTransaction.TransactionId", databaseCurrentTransactionTransactionId));
            }
            if (databaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.AutoTransactionsEnabled", databaseAutoTransactionsEnabled));
            }
            if (databaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.ProviderName", databaseProviderName));
            }
            if (changeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.AutoDetectChangesEnabled", changeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.LazyLoadingEnabled", changeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.QueryTrackingBehavior", changeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DeleteOrphansTiming", changeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.CascadeDeleteTiming", changeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextDatabaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.CurrentTransaction.TransactionId", changeTrackerContextDatabaseCurrentTransactionTransactionId));
            }
            if (changeTrackerContextDatabaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.AutoTransactionsEnabled", changeTrackerContextDatabaseAutoTransactionsEnabled));
            }
            if (changeTrackerContextDatabaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.ProviderName", changeTrackerContextDatabaseProviderName));
            }
            if (changeTrackerContextChangeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.AutoDetectChangesEnabled", changeTrackerContextChangeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerContextChangeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.LazyLoadingEnabled", changeTrackerContextChangeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerContextChangeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.QueryTrackingBehavior", changeTrackerContextChangeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerContextChangeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DeleteOrphansTiming", changeTrackerContextChangeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerContextChangeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.CascadeDeleteTiming", changeTrackerContextChangeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextChangeTrackerContext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.Context", changeTrackerContextChangeTrackerContext));
            }
            if (changeTrackerContextModel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Model", changeTrackerContextModel));
            }
            if (changeTrackerContextContextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.InstanceId", changeTrackerContextContextIdInstanceId));
            }
            if (changeTrackerContextContextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.Lease", changeTrackerContextContextIdLease));
            }
            if (model != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Model", model));
            }
            if (contextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.InstanceId", contextIdInstanceId));
            }
            if (contextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.Lease", contextIdLease));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/getapptoken", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetapptokenPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns></returns>
        public void UserGetreferreremailPost (PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest))
        {
             UserGetreferreremailPostWithHttpInfo(postGetReferrerEmailRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserGetreferreremailPostWithHttpInfo (PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postGetReferrerEmailRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/getreferreremail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetreferreremailPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserGetreferreremailPostAsync (PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest))
        {
             await UserGetreferreremailPostAsyncWithHttpInfo(postGetReferrerEmailRequest);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postGetReferrerEmailRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserGetreferreremailPostAsyncWithHttpInfo (PostGetReferrerEmailRequest postGetReferrerEmailRequest = default(PostGetReferrerEmailRequest))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = postGetReferrerEmailRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/getreferreremail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGetreferreremailPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPassword"> (optional)</param>
        /// <returns></returns>
        public void UserResetpasswordPost (ResetPassword resetPassword = default(ResetPassword))
        {
             UserResetpasswordPostWithHttpInfo(resetPassword);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPassword"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserResetpasswordPostWithHttpInfo (ResetPassword resetPassword = default(ResetPassword))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = resetPassword;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/resetpassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserResetpasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPassword"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserResetpasswordPostAsync (ResetPassword resetPassword = default(ResetPassword))
        {
             await UserResetpasswordPostAsyncWithHttpInfo(resetPassword);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resetPassword"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserResetpasswordPostAsyncWithHttpInfo (ResetPassword resetPassword = default(ResetPassword))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = resetPassword;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/resetpassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserResetpasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPassword"> (optional)</param>
        /// <returns></returns>
        public void UserRestorepasswordPost (ForgotPassword forgotPassword = default(ForgotPassword))
        {
             UserRestorepasswordPostWithHttpInfo(forgotPassword);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPassword"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserRestorepasswordPostWithHttpInfo (ForgotPassword forgotPassword = default(ForgotPassword))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = forgotPassword;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/restorepassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserRestorepasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPassword"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserRestorepasswordPostAsync (ForgotPassword forgotPassword = default(ForgotPassword))
        {
             await UserRestorepasswordPostAsyncWithHttpInfo(forgotPassword);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forgotPassword"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserRestorepasswordPostAsyncWithHttpInfo (ForgotPassword forgotPassword = default(ForgotPassword))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = forgotPassword;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/restorepassword", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserRestorepasswordPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSendSms"> (optional)</param>
        /// <returns></returns>
        public void UserSendsmscodePost (PostSendSms postSendSms = default(PostSendSms))
        {
             UserSendsmscodePostWithHttpInfo(postSendSms);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSendSms"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserSendsmscodePostWithHttpInfo (PostSendSms postSendSms = default(PostSendSms))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postSendSms;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/sendsmscode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSendsmscodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSendSms"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserSendsmscodePostAsync (PostSendSms postSendSms = default(PostSendSms))
        {
             await UserSendsmscodePostAsyncWithHttpInfo(postSendSms);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSendSms"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserSendsmscodePostAsyncWithHttpInfo (PostSendSms postSendSms = default(PostSendSms))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = postSendSms;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/sendsmscode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSendsmscodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns></returns>
        public void UserSetAffiliatePost (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest))
        {
             UserSetAffiliatePostWithHttpInfo(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, model, contextIdInstanceId, contextIdLease, postSetAffiliateRequest);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserSetAffiliatePostWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cryptoCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "CryptoCurrencies", cryptoCurrencies));
            }
            if (orders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Orders", orders));
            }
            if (depositAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "DepositAddresses", depositAddresses));
            }
            if (userBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserBalances", userBalances));
            }
            if (markets != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Markets", markets));
            }
            if (tradingPairs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingPairs", tradingPairs));
            }
            if (transactions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Transactions", transactions));
            }
            if (withdrawRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "WithdrawRequests", withdrawRequests));
            }
            if (trades != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Trades", trades));
            }
            if (quotes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Quotes", quotes));
            }
            if (smsVerificationMessages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "SmsVerificationMessages", smsVerificationMessages));
            }
            if (tradingAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingAmounts", tradingAmounts));
            }
            if (rippleDestinationTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RippleDestinationTags", rippleDestinationTags));
            }
            if (bitcoinBasedCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BitcoinBasedCurrencies", bitcoinBasedCurrencies));
            }
            if (eRC20Tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ERC20Tokens", eRC20Tokens));
            }
            if (balanceActions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BalanceActions", balanceActions));
            }
            if (keysValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "KeysValues", keysValues));
            }
            if (applicationTokenAccesses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationTokenAccesses", applicationTokenAccesses));
            }
            if (applicationQrCommands != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationQrCommands", applicationQrCommands));
            }
            if (pushTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "PushTokens", pushTokens));
            }
            if (userRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserRoles", userRoles));
            }
            if (roles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Roles", roles));
            }
            if (roleClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RoleClaims", roleClaims));
            }
            if (users != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Users", users));
            }
            if (userClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserClaims", userClaims));
            }
            if (userLogins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserLogins", userLogins));
            }
            if (userTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserTokens", userTokens));
            }
            if (databaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.CurrentTransaction.TransactionId", databaseCurrentTransactionTransactionId));
            }
            if (databaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.AutoTransactionsEnabled", databaseAutoTransactionsEnabled));
            }
            if (databaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.ProviderName", databaseProviderName));
            }
            if (changeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.AutoDetectChangesEnabled", changeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.LazyLoadingEnabled", changeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.QueryTrackingBehavior", changeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DeleteOrphansTiming", changeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.CascadeDeleteTiming", changeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextDatabaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.CurrentTransaction.TransactionId", changeTrackerContextDatabaseCurrentTransactionTransactionId));
            }
            if (changeTrackerContextDatabaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.AutoTransactionsEnabled", changeTrackerContextDatabaseAutoTransactionsEnabled));
            }
            if (changeTrackerContextDatabaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.ProviderName", changeTrackerContextDatabaseProviderName));
            }
            if (changeTrackerContextChangeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.AutoDetectChangesEnabled", changeTrackerContextChangeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerContextChangeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.LazyLoadingEnabled", changeTrackerContextChangeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerContextChangeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.QueryTrackingBehavior", changeTrackerContextChangeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerContextChangeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DeleteOrphansTiming", changeTrackerContextChangeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerContextChangeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.CascadeDeleteTiming", changeTrackerContextChangeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextChangeTrackerContext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.Context", changeTrackerContextChangeTrackerContext));
            }
            if (changeTrackerContextModel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Model", changeTrackerContextModel));
            }
            if (changeTrackerContextContextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.InstanceId", changeTrackerContextContextIdInstanceId));
            }
            if (changeTrackerContextContextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.Lease", changeTrackerContextContextIdLease));
            }
            if (model != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Model", model));
            }
            if (contextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.InstanceId", contextIdInstanceId));
            }
            if (contextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.Lease", contextIdLease));
            }
            localVarRequestOptions.Data = postSetAffiliateRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/setAffiliate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSetAffiliatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserSetAffiliatePostAsync (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest))
        {
             await UserSetAffiliatePostAsyncWithHttpInfo(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, model, contextIdInstanceId, contextIdLease, postSetAffiliateRequest);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cryptoCurrencies"> (optional)</param>
        /// <param name="orders"> (optional)</param>
        /// <param name="depositAddresses"> (optional)</param>
        /// <param name="userBalances"> (optional)</param>
        /// <param name="markets"> (optional)</param>
        /// <param name="tradingPairs"> (optional)</param>
        /// <param name="transactions"> (optional)</param>
        /// <param name="withdrawRequests"> (optional)</param>
        /// <param name="trades"> (optional)</param>
        /// <param name="quotes"> (optional)</param>
        /// <param name="smsVerificationMessages"> (optional)</param>
        /// <param name="tradingAmounts"> (optional)</param>
        /// <param name="rippleDestinationTags"> (optional)</param>
        /// <param name="bitcoinBasedCurrencies"> (optional)</param>
        /// <param name="eRC20Tokens"> (optional)</param>
        /// <param name="balanceActions"> (optional)</param>
        /// <param name="keysValues"> (optional)</param>
        /// <param name="applicationTokenAccesses"> (optional)</param>
        /// <param name="applicationQrCommands"> (optional)</param>
        /// <param name="pushTokens"> (optional)</param>
        /// <param name="userRoles"> (optional)</param>
        /// <param name="roles"> (optional)</param>
        /// <param name="roleClaims"> (optional)</param>
        /// <param name="users"> (optional)</param>
        /// <param name="userClaims"> (optional)</param>
        /// <param name="userLogins"> (optional)</param>
        /// <param name="userTokens"> (optional)</param>
        /// <param name="databaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="databaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="databaseProviderName"> (optional)</param>
        /// <param name="changeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseCurrentTransactionTransactionId"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseAutoTransactionsEnabled"> (optional)</param>
        /// <param name="changeTrackerContextDatabaseProviderName"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerAutoDetectChangesEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerLazyLoadingEnabled"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerQueryTrackingBehavior"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerDeleteOrphansTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerCascadeDeleteTiming"> (optional)</param>
        /// <param name="changeTrackerContextChangeTrackerContext"> (optional)</param>
        /// <param name="changeTrackerContextModel"> (optional)</param>
        /// <param name="changeTrackerContextContextIdInstanceId"> (optional)</param>
        /// <param name="changeTrackerContextContextIdLease"> (optional)</param>
        /// <param name="model"> (optional)</param>
        /// <param name="contextIdInstanceId"> (optional)</param>
        /// <param name="contextIdLease"> (optional)</param>
        /// <param name="postSetAffiliateRequest"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserSetAffiliatePostAsyncWithHttpInfo (List<CryptoCurrency> cryptoCurrencies = default(List<CryptoCurrency>), List<Order> orders = default(List<Order>), List<DepositAddress> depositAddresses = default(List<DepositAddress>), List<Balance> userBalances = default(List<Balance>), List<Market> markets = default(List<Market>), List<TradingPair> tradingPairs = default(List<TradingPair>), List<Transaction> transactions = default(List<Transaction>), List<WithdrawRequest> withdrawRequests = default(List<WithdrawRequest>), List<Trade> trades = default(List<Trade>), List<Quote> quotes = default(List<Quote>), List<SmsVerificationMessage> smsVerificationMessages = default(List<SmsVerificationMessage>), List<TradingAmount> tradingAmounts = default(List<TradingAmount>), List<RippleDestinationTag> rippleDestinationTags = default(List<RippleDestinationTag>), List<BitcoinBasedCurrency> bitcoinBasedCurrencies = default(List<BitcoinBasedCurrency>), List<ERC20Token> eRC20Tokens = default(List<ERC20Token>), List<BalanceAction> balanceActions = default(List<BalanceAction>), List<KeyValue> keysValues = default(List<KeyValue>), List<IApplicationTokenAccess> applicationTokenAccesses = default(List<IApplicationTokenAccess>), List<IApplicationQrCommand> applicationQrCommands = default(List<IApplicationQrCommand>), List<PushToken> pushTokens = default(List<PushToken>), List<StringIdentityUserRole> userRoles = default(List<StringIdentityUserRole>), List<IdentityRole> roles = default(List<IdentityRole>), List<StringIdentityRoleClaim> roleClaims = default(List<StringIdentityRoleClaim>), List<ApplicationUser> users = default(List<ApplicationUser>), List<StringIdentityUserClaim> userClaims = default(List<StringIdentityUserClaim>), List<StringIdentityUserLogin> userLogins = default(List<StringIdentityUserLogin>), List<StringIdentityUserToken> userTokens = default(List<StringIdentityUserToken>), Guid? databaseCurrentTransactionTransactionId = default(Guid?), bool? databaseAutoTransactionsEnabled = default(bool?), string databaseProviderName = default(string), bool? changeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerCascadeDeleteTiming = default(CascadeTiming?), Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = default(Guid?), bool? changeTrackerContextDatabaseAutoTransactionsEnabled = default(bool?), string changeTrackerContextDatabaseProviderName = default(string), bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = default(bool?), bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = default(bool?), QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = default(QueryTrackingBehavior?), CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = default(CascadeTiming?), CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = default(CascadeTiming?), DbContext changeTrackerContextChangeTrackerContext = default(DbContext), Object changeTrackerContextModel = default(Object), Guid? changeTrackerContextContextIdInstanceId = default(Guid?), int? changeTrackerContextContextIdLease = default(int?), Object model = default(Object), Guid? contextIdInstanceId = default(Guid?), int? contextIdLease = default(int?), PostSetAffiliateRequest postSetAffiliateRequest = default(PostSetAffiliateRequest))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cryptoCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "CryptoCurrencies", cryptoCurrencies));
            }
            if (orders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Orders", orders));
            }
            if (depositAddresses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "DepositAddresses", depositAddresses));
            }
            if (userBalances != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserBalances", userBalances));
            }
            if (markets != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Markets", markets));
            }
            if (tradingPairs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingPairs", tradingPairs));
            }
            if (transactions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Transactions", transactions));
            }
            if (withdrawRequests != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "WithdrawRequests", withdrawRequests));
            }
            if (trades != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Trades", trades));
            }
            if (quotes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Quotes", quotes));
            }
            if (smsVerificationMessages != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "SmsVerificationMessages", smsVerificationMessages));
            }
            if (tradingAmounts != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "TradingAmounts", tradingAmounts));
            }
            if (rippleDestinationTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RippleDestinationTags", rippleDestinationTags));
            }
            if (bitcoinBasedCurrencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BitcoinBasedCurrencies", bitcoinBasedCurrencies));
            }
            if (eRC20Tokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ERC20Tokens", eRC20Tokens));
            }
            if (balanceActions != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "BalanceActions", balanceActions));
            }
            if (keysValues != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "KeysValues", keysValues));
            }
            if (applicationTokenAccesses != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationTokenAccesses", applicationTokenAccesses));
            }
            if (applicationQrCommands != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ApplicationQrCommands", applicationQrCommands));
            }
            if (pushTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "PushTokens", pushTokens));
            }
            if (userRoles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserRoles", userRoles));
            }
            if (roles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Roles", roles));
            }
            if (roleClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "RoleClaims", roleClaims));
            }
            if (users != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "Users", users));
            }
            if (userClaims != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserClaims", userClaims));
            }
            if (userLogins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserLogins", userLogins));
            }
            if (userTokens != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "UserTokens", userTokens));
            }
            if (databaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.CurrentTransaction.TransactionId", databaseCurrentTransactionTransactionId));
            }
            if (databaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.AutoTransactionsEnabled", databaseAutoTransactionsEnabled));
            }
            if (databaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Database.ProviderName", databaseProviderName));
            }
            if (changeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.AutoDetectChangesEnabled", changeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.LazyLoadingEnabled", changeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.QueryTrackingBehavior", changeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.DeleteOrphansTiming", changeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.CascadeDeleteTiming", changeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextDatabaseCurrentTransactionTransactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.CurrentTransaction.TransactionId", changeTrackerContextDatabaseCurrentTransactionTransactionId));
            }
            if (changeTrackerContextDatabaseAutoTransactionsEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.AutoTransactionsEnabled", changeTrackerContextDatabaseAutoTransactionsEnabled));
            }
            if (changeTrackerContextDatabaseProviderName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Database.ProviderName", changeTrackerContextDatabaseProviderName));
            }
            if (changeTrackerContextChangeTrackerAutoDetectChangesEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.AutoDetectChangesEnabled", changeTrackerContextChangeTrackerAutoDetectChangesEnabled));
            }
            if (changeTrackerContextChangeTrackerLazyLoadingEnabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.LazyLoadingEnabled", changeTrackerContextChangeTrackerLazyLoadingEnabled));
            }
            if (changeTrackerContextChangeTrackerQueryTrackingBehavior != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.QueryTrackingBehavior", changeTrackerContextChangeTrackerQueryTrackingBehavior));
            }
            if (changeTrackerContextChangeTrackerDeleteOrphansTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.DeleteOrphansTiming", changeTrackerContextChangeTrackerDeleteOrphansTiming));
            }
            if (changeTrackerContextChangeTrackerCascadeDeleteTiming != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.CascadeDeleteTiming", changeTrackerContextChangeTrackerCascadeDeleteTiming));
            }
            if (changeTrackerContextChangeTrackerContext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ChangeTracker.Context", changeTrackerContextChangeTrackerContext));
            }
            if (changeTrackerContextModel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.Model", changeTrackerContextModel));
            }
            if (changeTrackerContextContextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.InstanceId", changeTrackerContextContextIdInstanceId));
            }
            if (changeTrackerContextContextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ChangeTracker.Context.ContextId.Lease", changeTrackerContextContextIdLease));
            }
            if (model != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Model", model));
            }
            if (contextIdInstanceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.InstanceId", contextIdInstanceId));
            }
            if (contextIdLease != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ContextId.Lease", contextIdLease));
            }
            localVarRequestOptions.Data = postSetAffiliateRequest;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/setAffiliate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSetAffiliatePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signIn"> (optional)</param>
        /// <returns></returns>
        public void UserSigninPost (SignIn signIn = default(SignIn))
        {
             UserSigninPostWithHttpInfo(signIn);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signIn"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserSigninPostWithHttpInfo (SignIn signIn = default(SignIn))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = signIn;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/signin", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSigninPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signIn"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserSigninPostAsync (SignIn signIn = default(SignIn))
        {
             await UserSigninPostAsyncWithHttpInfo(signIn);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signIn"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserSigninPostAsyncWithHttpInfo (SignIn signIn = default(SignIn))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = signIn;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/signin", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSigninPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signUp"> (optional)</param>
        /// <returns></returns>
        public void UserSignupPost (SignUp signUp = default(SignUp))
        {
             UserSignupPostWithHttpInfo(signUp);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signUp"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserSignupPostWithHttpInfo (SignUp signUp = default(SignUp))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = signUp;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/signup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSignupPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signUp"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserSignupPostAsync (SignUp signUp = default(SignUp))
        {
             await UserSignupPostAsyncWithHttpInfo(signUp);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signUp"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserSignupPostAsyncWithHttpInfo (SignUp signUp = default(SignUp))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = signUp;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/signup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSignupPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UserValidatePinPost (Object body = default(Object))
        {
             UserValidatePinPostWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserValidatePinPostWithHttpInfo (Object body = default(Object))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/validatePin", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserValidatePinPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserValidatePinPostAsync (Object body = default(Object))
        {
             await UserValidatePinPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserValidatePinPostAsyncWithHttpInfo (Object body = default(Object))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/validatePin", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserValidatePinPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void UserVerificationsGet ()
        {
             UserVerificationsGetWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserVerificationsGetWithHttpInfo ()
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/User/verifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserVerificationsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserVerificationsGetAsync ()
        {
             await UserVerificationsGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserVerificationsGetAsyncWithHttpInfo ()
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/User/verifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserVerificationsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVefirySms"> (optional)</param>
        /// <returns></returns>
        public void UserVerifysmscodePost (PostVefirySms postVefirySms = default(PostVefirySms))
        {
             UserVerifysmscodePostWithHttpInfo(postVefirySms);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVefirySms"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserVerifysmscodePostWithHttpInfo (PostVefirySms postVefirySms = default(PostVefirySms))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postVefirySms;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/User/verifysmscode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserVerifysmscodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVefirySms"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserVerifysmscodePostAsync (PostVefirySms postVefirySms = default(PostVefirySms))
        {
             await UserVerifysmscodePostAsyncWithHttpInfo(postVefirySms);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postVefirySms"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserVerifysmscodePostAsyncWithHttpInfo (PostVefirySms postVefirySms = default(PostVefirySms))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = postVefirySms;

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/User/verifysmscode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserVerifysmscodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns></returns>
        public void UserWithdrawalsGet (string currency = default(string))
        {
             UserWithdrawalsGetWithHttpInfo(currency);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserWithdrawalsGetWithHttpInfo (string currency = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/User/withdrawals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserWithdrawalsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserWithdrawalsGetAsync (string currency = default(string))
        {
             await UserWithdrawalsGetAsyncWithHttpInfo(currency);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currency"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserWithdrawalsGetAsyncWithHttpInfo (string currency = default(string))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (currency != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currency", currency));
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/User/withdrawals", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserWithdrawalsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
