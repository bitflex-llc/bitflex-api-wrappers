/* 
 * BITFLEX Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests : IDisposable
    {
        private UserApi instance;

        public UserApiTests()
        {
            instance = new UserApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UserApi
            //Assert.IsType(typeof(UserApi), instance, "instance is a UserApi");
        }

        
        /// <summary>
        /// Test ApiUserBalanceactionsGet
        /// </summary>
        [Fact]
        public void ApiUserBalanceactionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //instance.ApiUserBalanceactionsGet(page, size);
            
        }
        
        /// <summary>
        /// Test ApiUserBalancesGet
        /// </summary>
        [Fact]
        public void ApiUserBalancesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiUserBalancesGet();
            //Assert.IsType<Dictionary<string, double>> (response, "response is Dictionary<string, double>");
        }
        
        /// <summary>
        /// Test ApiUserBalanceslistGet
        /// </summary>
        [Fact]
        public void ApiUserBalanceslistGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ApiUserBalanceslistGet();
            
        }
        
        /// <summary>
        /// Test ApiUserDepositsGet
        /// </summary>
        [Fact]
        public void ApiUserDepositsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //instance.ApiUserDepositsGet(currency);
            
        }
        
        /// <summary>
        /// Test ApiUserGetapptokenGet
        /// </summary>
        [Fact]
        public void ApiUserGetapptokenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiUserGetapptokenGet();
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ApiUserOrdersGet
        /// </summary>
        [Fact]
        public void ApiUserOrdersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pair = null;
            //instance.ApiUserOrdersGet(pair);
            
        }
        
        /// <summary>
        /// Test ApiUserTradehistoryGet
        /// </summary>
        [Fact]
        public void ApiUserTradehistoryGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? size = null;
            //instance.ApiUserTradehistoryGet(page, size);
            
        }
        
        /// <summary>
        /// Test ApiUserValidateOauthGet
        /// </summary>
        [Fact]
        public void ApiUserValidateOauthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.ApiUserValidateOauthGet(id);
            //Assert.IsType<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ApiUserValidateapptokenPost
        /// </summary>
        [Fact]
        public void ApiUserValidateapptokenPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //instance.ApiUserValidateapptokenPost(body);
            
        }
        
        /// <summary>
        /// Test ApiUserWithdrawalsGet
        /// </summary>
        [Fact]
        public void ApiUserWithdrawalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //instance.ApiUserWithdrawalsGet(currency);
            
        }
        
        /// <summary>
        /// Test User2faPost
        /// </summary>
        [Fact]
        public void User2faPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //instance.User2faPost(body);
            
        }
        
        /// <summary>
        /// Test UserAffiliatedataPost
        /// </summary>
        [Fact]
        public void UserAffiliatedataPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<CryptoCurrency> cryptoCurrencies = null;
            //List<Order> orders = null;
            //List<DepositAddress> depositAddresses = null;
            //List<Balance> userBalances = null;
            //List<Market> markets = null;
            //List<TradingPair> tradingPairs = null;
            //List<Transaction> transactions = null;
            //List<WithdrawRequest> withdrawRequests = null;
            //List<Trade> trades = null;
            //List<Quote> quotes = null;
            //List<SmsVerificationMessage> smsVerificationMessages = null;
            //List<TradingAmount> tradingAmounts = null;
            //List<RippleDestinationTag> rippleDestinationTags = null;
            //List<BitcoinBasedCurrency> bitcoinBasedCurrencies = null;
            //List<ERC20Token> eRC20Tokens = null;
            //List<BalanceAction> balanceActions = null;
            //List<KeyValue> keysValues = null;
            //List<IApplicationTokenAccess> applicationTokenAccesses = null;
            //List<IApplicationQrCommand> applicationQrCommands = null;
            //List<PushToken> pushTokens = null;
            //List<StringIdentityUserRole> userRoles = null;
            //List<IdentityRole> roles = null;
            //List<StringIdentityRoleClaim> roleClaims = null;
            //List<ApplicationUser> users = null;
            //List<StringIdentityUserClaim> userClaims = null;
            //List<StringIdentityUserLogin> userLogins = null;
            //List<StringIdentityUserToken> userTokens = null;
            //Guid? databaseCurrentTransactionTransactionId = null;
            //bool? databaseAutoTransactionsEnabled = null;
            //string databaseProviderName = null;
            //bool? changeTrackerAutoDetectChangesEnabled = null;
            //bool? changeTrackerLazyLoadingEnabled = null;
            //QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = null;
            //CascadeTiming? changeTrackerDeleteOrphansTiming = null;
            //CascadeTiming? changeTrackerCascadeDeleteTiming = null;
            //Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = null;
            //bool? changeTrackerContextDatabaseAutoTransactionsEnabled = null;
            //string changeTrackerContextDatabaseProviderName = null;
            //bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = null;
            //bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = null;
            //QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = null;
            //CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = null;
            //CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = null;
            //DbContext changeTrackerContextChangeTrackerContext = null;
            //Object changeTrackerContextModel = null;
            //Guid? changeTrackerContextContextIdInstanceId = null;
            //int? changeTrackerContextContextIdLease = null;
            //Object model = null;
            //Guid? contextIdInstanceId = null;
            //int? contextIdLease = null;
            //instance.UserAffiliatedataPost(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, model, contextIdInstanceId, contextIdLease);
            
        }
        
        /// <summary>
        /// Test UserApplicationqrcommandPost
        /// </summary>
        [Fact]
        public void UserApplicationqrcommandPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //instance.UserApplicationqrcommandPost(body);
            
        }
        
        /// <summary>
        /// Test UserConfirmemailGet
        /// </summary>
        [Fact]
        public void UserConfirmemailGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string code = null;
            //bool? isInApp = null;
            //instance.UserConfirmemailGet(userId, code, isInApp);
            
        }
        
        /// <summary>
        /// Test UserDisable2faPost
        /// </summary>
        [Fact]
        public void UserDisable2faPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EnableDisable2Fa enableDisable2Fa = null;
            //instance.UserDisable2faPost(enableDisable2Fa);
            
        }
        
        /// <summary>
        /// Test UserEnable2faPost
        /// </summary>
        [Fact]
        public void UserEnable2faPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EnableDisable2Fa enableDisable2Fa = null;
            //instance.UserEnable2faPost(enableDisable2Fa);
            
        }
        
        /// <summary>
        /// Test UserExternaltokenPost
        /// </summary>
        [Fact]
        public void UserExternaltokenPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //instance.UserExternaltokenPost(body);
            
        }
        
        /// <summary>
        /// Test UserGetapptokenPost
        /// </summary>
        [Fact]
        public void UserGetapptokenPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<CryptoCurrency> cryptoCurrencies = null;
            //List<Order> orders = null;
            //List<DepositAddress> depositAddresses = null;
            //List<Balance> userBalances = null;
            //List<Market> markets = null;
            //List<TradingPair> tradingPairs = null;
            //List<Transaction> transactions = null;
            //List<WithdrawRequest> withdrawRequests = null;
            //List<Trade> trades = null;
            //List<Quote> quotes = null;
            //List<SmsVerificationMessage> smsVerificationMessages = null;
            //List<TradingAmount> tradingAmounts = null;
            //List<RippleDestinationTag> rippleDestinationTags = null;
            //List<BitcoinBasedCurrency> bitcoinBasedCurrencies = null;
            //List<ERC20Token> eRC20Tokens = null;
            //List<BalanceAction> balanceActions = null;
            //List<KeyValue> keysValues = null;
            //List<IApplicationTokenAccess> applicationTokenAccesses = null;
            //List<IApplicationQrCommand> applicationQrCommands = null;
            //List<PushToken> pushTokens = null;
            //List<StringIdentityUserRole> userRoles = null;
            //List<IdentityRole> roles = null;
            //List<StringIdentityRoleClaim> roleClaims = null;
            //List<ApplicationUser> users = null;
            //List<StringIdentityUserClaim> userClaims = null;
            //List<StringIdentityUserLogin> userLogins = null;
            //List<StringIdentityUserToken> userTokens = null;
            //Guid? databaseCurrentTransactionTransactionId = null;
            //bool? databaseAutoTransactionsEnabled = null;
            //string databaseProviderName = null;
            //bool? changeTrackerAutoDetectChangesEnabled = null;
            //bool? changeTrackerLazyLoadingEnabled = null;
            //QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = null;
            //CascadeTiming? changeTrackerDeleteOrphansTiming = null;
            //CascadeTiming? changeTrackerCascadeDeleteTiming = null;
            //Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = null;
            //bool? changeTrackerContextDatabaseAutoTransactionsEnabled = null;
            //string changeTrackerContextDatabaseProviderName = null;
            //bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = null;
            //bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = null;
            //QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = null;
            //CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = null;
            //CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = null;
            //DbContext changeTrackerContextChangeTrackerContext = null;
            //Object changeTrackerContextModel = null;
            //Guid? changeTrackerContextContextIdInstanceId = null;
            //int? changeTrackerContextContextIdLease = null;
            //Object model = null;
            //Guid? contextIdInstanceId = null;
            //int? contextIdLease = null;
            //instance.UserGetapptokenPost(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, model, contextIdInstanceId, contextIdLease);
            
        }
        
        /// <summary>
        /// Test UserGetreferreremailPost
        /// </summary>
        [Fact]
        public void UserGetreferreremailPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostGetReferrerEmailRequest postGetReferrerEmailRequest = null;
            //instance.UserGetreferreremailPost(postGetReferrerEmailRequest);
            
        }
        
        /// <summary>
        /// Test UserResetpasswordPost
        /// </summary>
        [Fact]
        public void UserResetpasswordPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ResetPassword resetPassword = null;
            //instance.UserResetpasswordPost(resetPassword);
            
        }
        
        /// <summary>
        /// Test UserRestorepasswordPost
        /// </summary>
        [Fact]
        public void UserRestorepasswordPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ForgotPassword forgotPassword = null;
            //instance.UserRestorepasswordPost(forgotPassword);
            
        }
        
        /// <summary>
        /// Test UserSendsmscodePost
        /// </summary>
        [Fact]
        public void UserSendsmscodePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostSendSms postSendSms = null;
            //instance.UserSendsmscodePost(postSendSms);
            
        }
        
        /// <summary>
        /// Test UserSetAffiliatePost
        /// </summary>
        [Fact]
        public void UserSetAffiliatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<CryptoCurrency> cryptoCurrencies = null;
            //List<Order> orders = null;
            //List<DepositAddress> depositAddresses = null;
            //List<Balance> userBalances = null;
            //List<Market> markets = null;
            //List<TradingPair> tradingPairs = null;
            //List<Transaction> transactions = null;
            //List<WithdrawRequest> withdrawRequests = null;
            //List<Trade> trades = null;
            //List<Quote> quotes = null;
            //List<SmsVerificationMessage> smsVerificationMessages = null;
            //List<TradingAmount> tradingAmounts = null;
            //List<RippleDestinationTag> rippleDestinationTags = null;
            //List<BitcoinBasedCurrency> bitcoinBasedCurrencies = null;
            //List<ERC20Token> eRC20Tokens = null;
            //List<BalanceAction> balanceActions = null;
            //List<KeyValue> keysValues = null;
            //List<IApplicationTokenAccess> applicationTokenAccesses = null;
            //List<IApplicationQrCommand> applicationQrCommands = null;
            //List<PushToken> pushTokens = null;
            //List<StringIdentityUserRole> userRoles = null;
            //List<IdentityRole> roles = null;
            //List<StringIdentityRoleClaim> roleClaims = null;
            //List<ApplicationUser> users = null;
            //List<StringIdentityUserClaim> userClaims = null;
            //List<StringIdentityUserLogin> userLogins = null;
            //List<StringIdentityUserToken> userTokens = null;
            //Guid? databaseCurrentTransactionTransactionId = null;
            //bool? databaseAutoTransactionsEnabled = null;
            //string databaseProviderName = null;
            //bool? changeTrackerAutoDetectChangesEnabled = null;
            //bool? changeTrackerLazyLoadingEnabled = null;
            //QueryTrackingBehavior? changeTrackerQueryTrackingBehavior = null;
            //CascadeTiming? changeTrackerDeleteOrphansTiming = null;
            //CascadeTiming? changeTrackerCascadeDeleteTiming = null;
            //Guid? changeTrackerContextDatabaseCurrentTransactionTransactionId = null;
            //bool? changeTrackerContextDatabaseAutoTransactionsEnabled = null;
            //string changeTrackerContextDatabaseProviderName = null;
            //bool? changeTrackerContextChangeTrackerAutoDetectChangesEnabled = null;
            //bool? changeTrackerContextChangeTrackerLazyLoadingEnabled = null;
            //QueryTrackingBehavior? changeTrackerContextChangeTrackerQueryTrackingBehavior = null;
            //CascadeTiming? changeTrackerContextChangeTrackerDeleteOrphansTiming = null;
            //CascadeTiming? changeTrackerContextChangeTrackerCascadeDeleteTiming = null;
            //DbContext changeTrackerContextChangeTrackerContext = null;
            //Object changeTrackerContextModel = null;
            //Guid? changeTrackerContextContextIdInstanceId = null;
            //int? changeTrackerContextContextIdLease = null;
            //Object model = null;
            //Guid? contextIdInstanceId = null;
            //int? contextIdLease = null;
            //PostSetAffiliateRequest postSetAffiliateRequest = null;
            //instance.UserSetAffiliatePost(cryptoCurrencies, orders, depositAddresses, userBalances, markets, tradingPairs, transactions, withdrawRequests, trades, quotes, smsVerificationMessages, tradingAmounts, rippleDestinationTags, bitcoinBasedCurrencies, eRC20Tokens, balanceActions, keysValues, applicationTokenAccesses, applicationQrCommands, pushTokens, userRoles, roles, roleClaims, users, userClaims, userLogins, userTokens, databaseCurrentTransactionTransactionId, databaseAutoTransactionsEnabled, databaseProviderName, changeTrackerAutoDetectChangesEnabled, changeTrackerLazyLoadingEnabled, changeTrackerQueryTrackingBehavior, changeTrackerDeleteOrphansTiming, changeTrackerCascadeDeleteTiming, changeTrackerContextDatabaseCurrentTransactionTransactionId, changeTrackerContextDatabaseAutoTransactionsEnabled, changeTrackerContextDatabaseProviderName, changeTrackerContextChangeTrackerAutoDetectChangesEnabled, changeTrackerContextChangeTrackerLazyLoadingEnabled, changeTrackerContextChangeTrackerQueryTrackingBehavior, changeTrackerContextChangeTrackerDeleteOrphansTiming, changeTrackerContextChangeTrackerCascadeDeleteTiming, changeTrackerContextChangeTrackerContext, changeTrackerContextModel, changeTrackerContextContextIdInstanceId, changeTrackerContextContextIdLease, model, contextIdInstanceId, contextIdLease, postSetAffiliateRequest);
            
        }
        
        /// <summary>
        /// Test UserSigninPost
        /// </summary>
        [Fact]
        public void UserSigninPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SignIn signIn = null;
            //instance.UserSigninPost(signIn);
            
        }
        
        /// <summary>
        /// Test UserSignupPost
        /// </summary>
        [Fact]
        public void UserSignupPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SignUp signUp = null;
            //instance.UserSignupPost(signUp);
            
        }
        
        /// <summary>
        /// Test UserValidatePinPost
        /// </summary>
        [Fact]
        public void UserValidatePinPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object body = null;
            //instance.UserValidatePinPost(body);
            
        }
        
        /// <summary>
        /// Test UserVerificationsGet
        /// </summary>
        [Fact]
        public void UserVerificationsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.UserVerificationsGet();
            
        }
        
        /// <summary>
        /// Test UserVerifysmscodePost
        /// </summary>
        [Fact]
        public void UserVerifysmscodePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostVefirySms postVefirySms = null;
            //instance.UserVerifysmscodePost(postVefirySms);
            
        }
        
        /// <summary>
        /// Test UserWithdrawalsGet
        /// </summary>
        [Fact]
        public void UserWithdrawalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string currency = null;
            //instance.UserWithdrawalsGet(currency);
            
        }
        
    }

}
